# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:07:18+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class Arch(RootModel[str]):
    root: str


class Arn(RootModel[str]):
    root: str


class AttributeKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class AttributeValue(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class Author(RootModel[str]):
    root: str


class Base64(RootModel[constr(pattern=r'^\S+$')]):
    root: constr(pattern=r'^\S+$')


class BaseScore(RootModel[float]):
    root: float


class BatchedOperationLayerDigest(RootModel[constr(min_length=0, max_length=1000)]):
    root: constr(min_length=0, max_length=1000)


class BatchedOperationLayerDigestList(RootModel[List[BatchedOperationLayerDigest]]):
    root: List[BatchedOperationLayerDigest] = Field(..., max_length=100, min_length=1)


class CreationTimestamp(RootModel[datetime]):
    root: datetime


class Date(RootModel[datetime]):
    root: datetime


class DeleteRegistryPolicyRequest(BaseModel):
    pass


class DescribeRegistryRequest(BaseModel):
    pass


class EmptyUploadException(RootModel[Any]):
    root: Any


class EncryptionType(Enum):
    AES256 = 'AES256'
    KMS = 'KMS'


class Epoch(RootModel[int]):
    root: int


class EvaluationTimestamp(RootModel[datetime]):
    root: datetime


class ExpirationTimestamp(RootModel[datetime]):
    root: datetime


class FilePath(RootModel[str]):
    root: str


class FindingArn(RootModel[str]):
    root: str


class FindingDescription(RootModel[str]):
    root: str


class FindingName(RootModel[str]):
    root: str


class FindingSeverity(Enum):
    INFORMATIONAL = 'INFORMATIONAL'
    LOW = 'LOW'
    MEDIUM = 'MEDIUM'
    HIGH = 'HIGH'
    CRITICAL = 'CRITICAL'
    UNDEFINED = 'UNDEFINED'


class ForceFlag(RootModel[bool]):
    root: bool


class GetRegistryPolicyRequest(BaseModel):
    pass


class GetRegistryScanningConfigurationRequest(BaseModel):
    pass


class ImageActionType(Enum):
    EXPIRE = 'EXPIRE'


class ImageAlreadyExistsException(RootModel[Any]):
    root: Any


class ImageCount(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class ImageDigest(RootModel[str]):
    root: str


class ImageDigestDoesNotMatchException(RootModel[Any]):
    root: Any


class ImageFailureCode(Enum):
    InvalidImageDigest = 'InvalidImageDigest'
    InvalidImageTag = 'InvalidImageTag'
    ImageTagDoesNotMatchDigest = 'ImageTagDoesNotMatchDigest'
    ImageNotFound = 'ImageNotFound'
    MissingDigestAndTag = 'MissingDigestAndTag'
    ImageReferencedByManifestList = 'ImageReferencedByManifestList'
    KmsError = 'KmsError'


class ImageFailureReason(RootModel[str]):
    root: str


class ImageManifest(RootModel[constr(min_length=1, max_length=4194304)]):
    root: constr(min_length=1, max_length=4194304)


class ImageNotFoundException(RootModel[Any]):
    root: Any


class ImageSizeInBytes(RootModel[int]):
    root: int


class ImageTag(RootModel[constr(min_length=1, max_length=300)]):
    root: constr(min_length=1, max_length=300)


class ImageTagAlreadyExistsException(RootModel[Any]):
    root: Any


class ImageTagList(RootModel[List[ImageTag]]):
    root: List[ImageTag]


class ImageTagMutability(Enum):
    MUTABLE = 'MUTABLE'
    IMMUTABLE = 'IMMUTABLE'


class ImageTagsList(RootModel[List[ImageTag]]):
    root: List[ImageTag]


class InvalidLayerException(RootModel[Any]):
    root: Any


class InvalidLayerPartException(RootModel[Any]):
    root: Any


class InvalidParameterException(RootModel[Any]):
    root: Any


class InvalidTagParameterException(RootModel[Any]):
    root: Any


class KmsException(RootModel[Any]):
    root: Any


class KmsKey(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class LayerAlreadyExistsException(RootModel[Any]):
    root: Any


class LayerAvailability(Enum):
    AVAILABLE = 'AVAILABLE'
    UNAVAILABLE = 'UNAVAILABLE'


class LayerDigest(RootModel[constr(pattern=r'[a-zA-Z0-9-_+.]+:[a-fA-F0-9]+')]):
    root: constr(pattern=r'[a-zA-Z0-9-_+.]+:[a-fA-F0-9]+')


class LayerDigestList(RootModel[List[LayerDigest]]):
    root: List[LayerDigest] = Field(..., max_length=100, min_length=1)


class LayerFailureCode(Enum):
    InvalidLayerDigest = 'InvalidLayerDigest'
    MissingLayerDigest = 'MissingLayerDigest'


class LayerFailureReason(RootModel[str]):
    root: str


class LayerInaccessibleException(RootModel[Any]):
    root: Any


class LayerPartBlob(RootModel[constr(min_length=0, max_length=20971520)]):
    root: constr(min_length=0, max_length=20971520)


class LayerPartTooSmallException(RootModel[Any]):
    root: Any


class LayerSizeInBytes(RootModel[int]):
    root: int


class LayersNotFoundException(RootModel[Any]):
    root: Any


class LifecyclePolicyNotFoundException(RootModel[Any]):
    root: Any


class LifecyclePolicyPreviewInProgressException(RootModel[Any]):
    root: Any


class LifecyclePolicyPreviewNotFoundException(RootModel[Any]):
    root: Any


class LifecyclePolicyPreviewStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETE = 'COMPLETE'
    EXPIRED = 'EXPIRED'
    FAILED = 'FAILED'


class LifecyclePolicyPreviewSummary(BaseModel):
    expiringImageTotalCount: Optional[ImageCount] = None


class LifecyclePolicyRuleAction(BaseModel):
    type: Optional[ImageActionType] = None


class LifecyclePolicyRulePriority(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class LifecyclePolicyText(RootModel[constr(min_length=100, max_length=30720)]):
    root: constr(min_length=100, max_length=30720)


class LifecyclePreviewMaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class LimitExceededException(RootModel[Any]):
    root: Any


class ListTagsForResourceRequest(BaseModel):
    resourceArn: Arn


class MaxResults(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class MediaType(RootModel[str]):
    root: str


class MediaTypeList(RootModel[List[MediaType]]):
    root: List[MediaType] = Field(..., max_length=100, min_length=1)


class Metric(RootModel[str]):
    root: str


class NextToken(RootModel[str]):
    root: str


class PackageManager(RootModel[str]):
    root: str


class PartSize(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class Platform(RootModel[str]):
    root: str


class ProxyEndpoint(RootModel[str]):
    root: str


class PullThroughCacheRuleAlreadyExistsException(RootModel[Any]):
    root: Any


class PullThroughCacheRuleNotFoundException(RootModel[Any]):
    root: Any


class PullThroughCacheRuleRepositoryPrefix(
    RootModel[
        constr(pattern=r'[a-z0-9]+(?:[._-][a-z0-9]+)*', min_length=2, max_length=20)
    ]
):
    root: constr(pattern=r'[a-z0-9]+(?:[._-][a-z0-9]+)*', min_length=2, max_length=20)


class PullThroughCacheRuleRepositoryPrefixList(
    RootModel[List[PullThroughCacheRuleRepositoryPrefix]]
):
    root: List[PullThroughCacheRuleRepositoryPrefix] = Field(
        ..., max_length=100, min_length=1
    )


class PushTimestamp(RootModel[datetime]):
    root: datetime


class Reason(RootModel[str]):
    root: str


class RecommendationText(RootModel[str]):
    root: str


class RecordedPullTimestamp(RootModel[datetime]):
    root: datetime


class ReferencedImagesNotFoundException(RootModel[Any]):
    root: Any


class Region(
    RootModel[constr(pattern=r'[0-9a-z-]{2,25}', min_length=2, max_length=25)]
):
    root: constr(pattern=r'[0-9a-z-]{2,25}', min_length=2, max_length=25)


class RegistryId(RootModel[constr(pattern=r'[0-9]{12}')]):
    root: constr(pattern=r'[0-9]{12}')


class RegistryPolicyNotFoundException(RootModel[Any]):
    root: Any


class RegistryPolicyText(RootModel[constr(min_length=0, max_length=10240)]):
    root: constr(min_length=0, max_length=10240)


class RelatedVulnerability(RootModel[str]):
    root: str


class Release(RootModel[str]):
    root: str


class ReplicationDestination(BaseModel):
    region: Region
    registryId: RegistryId


class ReplicationDestinationList(RootModel[List[ReplicationDestination]]):
    root: List[ReplicationDestination] = Field(..., max_length=25, min_length=0)


class ReplicationError(RootModel[str]):
    root: str


class ReplicationStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETE = 'COMPLETE'
    FAILED = 'FAILED'


class RepositoryAlreadyExistsException(RootModel[Any]):
    root: Any


class RepositoryFilterType(Enum):
    PREFIX_MATCH = 'PREFIX_MATCH'


class RepositoryFilterValue(
    RootModel[
        constr(
            pattern=r'^(?:[a-z0-9]+(?:[._-][a-z0-9]*)*/)*[a-z0-9]*(?:[._-][a-z0-9]*)*$',
            min_length=2,
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'^(?:[a-z0-9]+(?:[._-][a-z0-9]*)*/)*[a-z0-9]*(?:[._-][a-z0-9]*)*$',
        min_length=2,
        max_length=256,
    )


class RepositoryName(
    RootModel[
        constr(
            pattern=r'(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*',
            min_length=2,
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*',
        min_length=2,
        max_length=256,
    )


class RepositoryNameList(RootModel[List[RepositoryName]]):
    root: List[RepositoryName] = Field(..., max_length=100, min_length=1)


class RepositoryNotEmptyException(RootModel[Any]):
    root: Any


class RepositoryNotFoundException(RootModel[Any]):
    root: Any


class RepositoryPolicyNotFoundException(RootModel[Any]):
    root: Any


class RepositoryPolicyText(RootModel[constr(min_length=0, max_length=10240)]):
    root: constr(min_length=0, max_length=10240)


class ResourceId(RootModel[str]):
    root: str


class ScanFrequency(Enum):
    SCAN_ON_PUSH = 'SCAN_ON_PUSH'
    CONTINUOUS_SCAN = 'CONTINUOUS_SCAN'
    MANUAL = 'MANUAL'


class ScanNotFoundException(RootModel[Any]):
    root: Any


class ScanOnPushFlag(RootModel[bool]):
    root: bool


class ScanStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETE = 'COMPLETE'
    FAILED = 'FAILED'
    UNSUPPORTED_IMAGE = 'UNSUPPORTED_IMAGE'
    ACTIVE = 'ACTIVE'
    PENDING = 'PENDING'
    SCAN_ELIGIBILITY_EXPIRED = 'SCAN_ELIGIBILITY_EXPIRED'
    FINDINGS_UNAVAILABLE = 'FINDINGS_UNAVAILABLE'


class ScanStatusDescription(RootModel[str]):
    root: str


class ScanTimestamp(RootModel[datetime]):
    root: datetime


class ScanType(Enum):
    BASIC = 'BASIC'
    ENHANCED = 'ENHANCED'


class ScanningConfigurationFailureCode(Enum):
    REPOSITORY_NOT_FOUND = 'REPOSITORY_NOT_FOUND'


class ScanningConfigurationFailureReason(RootModel[str]):
    root: str


class ScanningConfigurationRepositoryNameList(RootModel[List[RepositoryName]]):
    root: List[RepositoryName] = Field(..., max_length=25, min_length=1)


class ScanningRepositoryFilterType(Enum):
    WILDCARD = 'WILDCARD'


class ScanningRepositoryFilterValue(
    RootModel[
        constr(
            pattern=r'^[a-z0-9*](?:[._\-/a-z0-9*]?[a-z0-9*]+)*$',
            min_length=1,
            max_length=255,
        )
    ]
):
    root: constr(
        pattern=r'^[a-z0-9*](?:[._\-/a-z0-9*]?[a-z0-9*]+)*$',
        min_length=1,
        max_length=255,
    )


class Score(RootModel[float]):
    root: float


class ScoringVector(RootModel[str]):
    root: str


class ServerException(RootModel[Any]):
    root: Any


class SetRepositoryPolicyRequest(BaseModel):
    force: Optional[ForceFlag] = None
    policyText: RepositoryPolicyText
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class SetRepositoryPolicyResponse(BaseModel):
    policyText: Optional[RepositoryPolicyText] = None
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None


class Severity(RootModel[str]):
    root: str


class SeverityCount(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class Source(RootModel[str]):
    root: str


class SourceLayerHash(RootModel[str]):
    root: str


class StartLifecyclePolicyPreviewRequest(BaseModel):
    lifecyclePolicyText: Optional[LifecyclePolicyText] = None
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class StartLifecyclePolicyPreviewResponse(BaseModel):
    lifecyclePolicyText: Optional[LifecyclePolicyText] = None
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None
    status: Optional[LifecyclePolicyPreviewStatus] = None


class Status(RootModel[str]):
    root: str


class TagKey(RootModel[str]):
    root: str


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey]


class TagResourceResponse(BaseModel):
    pass


class TagStatus(Enum):
    TAGGED = 'TAGGED'
    UNTAGGED = 'UNTAGGED'
    ANY = 'ANY'


class TagValue(RootModel[str]):
    root: str


class Tags(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class Title(RootModel[str]):
    root: str


class TooManyTagsException(RootModel[Any]):
    root: Any


class Type(RootModel[str]):
    root: str


class UnsupportedImageTypeException(RootModel[Any]):
    root: Any


class UnsupportedUpstreamRegistryException(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    resourceArn: Arn
    tagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class UploadId(
    RootModel[
        constr(
            pattern=r'[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}'
        )
    ]
):
    root: constr(
        pattern=r'[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}'
    )


class UploadLayerPartRequest(BaseModel):
    layerPartBlob: LayerPartBlob
    partFirstByte: PartSize
    partLastByte: PartSize
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName
    uploadId: UploadId


class UploadLayerPartResponse(BaseModel):
    lastByteReceived: Optional[PartSize] = None
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None
    uploadId: Optional[UploadId] = None


class UploadNotFoundException(RootModel[Any]):
    root: Any


class Url(RootModel[str]):
    root: str


class ValidationException(RootModel[Any]):
    root: Any


class Version(RootModel[str]):
    root: str


class VulnerabilityId(RootModel[str]):
    root: str


class VulnerabilitySourceUpdateTimestamp(RootModel[datetime]):
    root: datetime


class VulnerablePackageName(RootModel[str]):
    root: str


class XAmzTarget(Enum):
    AmazonEC2ContainerRegistry_V20150921_BatchCheckLayerAvailability = (
        'AmazonEC2ContainerRegistry_V20150921.BatchCheckLayerAvailability'
    )


class XAmzTarget1(Enum):
    AmazonEC2ContainerRegistry_V20150921_BatchDeleteImage = (
        'AmazonEC2ContainerRegistry_V20150921.BatchDeleteImage'
    )


class XAmzTarget2(Enum):
    AmazonEC2ContainerRegistry_V20150921_BatchGetImage = (
        'AmazonEC2ContainerRegistry_V20150921.BatchGetImage'
    )


class XAmzTarget3(Enum):
    AmazonEC2ContainerRegistry_V20150921_BatchGetRepositoryScanningConfiguration = (
        'AmazonEC2ContainerRegistry_V20150921.BatchGetRepositoryScanningConfiguration'
    )


class XAmzTarget4(Enum):
    AmazonEC2ContainerRegistry_V20150921_CompleteLayerUpload = (
        'AmazonEC2ContainerRegistry_V20150921.CompleteLayerUpload'
    )


class XAmzTarget5(Enum):
    AmazonEC2ContainerRegistry_V20150921_CreatePullThroughCacheRule = (
        'AmazonEC2ContainerRegistry_V20150921.CreatePullThroughCacheRule'
    )


class XAmzTarget6(Enum):
    AmazonEC2ContainerRegistry_V20150921_CreateRepository = (
        'AmazonEC2ContainerRegistry_V20150921.CreateRepository'
    )


class XAmzTarget7(Enum):
    AmazonEC2ContainerRegistry_V20150921_DeleteLifecyclePolicy = (
        'AmazonEC2ContainerRegistry_V20150921.DeleteLifecyclePolicy'
    )


class XAmzTarget8(Enum):
    AmazonEC2ContainerRegistry_V20150921_DeletePullThroughCacheRule = (
        'AmazonEC2ContainerRegistry_V20150921.DeletePullThroughCacheRule'
    )


class XAmzTarget9(Enum):
    AmazonEC2ContainerRegistry_V20150921_DeleteRegistryPolicy = (
        'AmazonEC2ContainerRegistry_V20150921.DeleteRegistryPolicy'
    )


class XAmzTarget10(Enum):
    AmazonEC2ContainerRegistry_V20150921_DeleteRepository = (
        'AmazonEC2ContainerRegistry_V20150921.DeleteRepository'
    )


class XAmzTarget11(Enum):
    AmazonEC2ContainerRegistry_V20150921_DeleteRepositoryPolicy = (
        'AmazonEC2ContainerRegistry_V20150921.DeleteRepositoryPolicy'
    )


class XAmzTarget12(Enum):
    AmazonEC2ContainerRegistry_V20150921_DescribeImageReplicationStatus = (
        'AmazonEC2ContainerRegistry_V20150921.DescribeImageReplicationStatus'
    )


class XAmzTarget13(Enum):
    AmazonEC2ContainerRegistry_V20150921_DescribeImageScanFindings = (
        'AmazonEC2ContainerRegistry_V20150921.DescribeImageScanFindings'
    )


class XAmzTarget14(Enum):
    AmazonEC2ContainerRegistry_V20150921_DescribeImages = (
        'AmazonEC2ContainerRegistry_V20150921.DescribeImages'
    )


class XAmzTarget15(Enum):
    AmazonEC2ContainerRegistry_V20150921_DescribePullThroughCacheRules = (
        'AmazonEC2ContainerRegistry_V20150921.DescribePullThroughCacheRules'
    )


class XAmzTarget16(Enum):
    AmazonEC2ContainerRegistry_V20150921_DescribeRegistry = (
        'AmazonEC2ContainerRegistry_V20150921.DescribeRegistry'
    )


class XAmzTarget17(Enum):
    AmazonEC2ContainerRegistry_V20150921_DescribeRepositories = (
        'AmazonEC2ContainerRegistry_V20150921.DescribeRepositories'
    )


class XAmzTarget18(Enum):
    AmazonEC2ContainerRegistry_V20150921_GetAuthorizationToken = (
        'AmazonEC2ContainerRegistry_V20150921.GetAuthorizationToken'
    )


class XAmzTarget19(Enum):
    AmazonEC2ContainerRegistry_V20150921_GetDownloadUrlForLayer = (
        'AmazonEC2ContainerRegistry_V20150921.GetDownloadUrlForLayer'
    )


class XAmzTarget20(Enum):
    AmazonEC2ContainerRegistry_V20150921_GetLifecyclePolicy = (
        'AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicy'
    )


class XAmzTarget21(Enum):
    AmazonEC2ContainerRegistry_V20150921_GetLifecyclePolicyPreview = (
        'AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicyPreview'
    )


class XAmzTarget22(Enum):
    AmazonEC2ContainerRegistry_V20150921_GetRegistryPolicy = (
        'AmazonEC2ContainerRegistry_V20150921.GetRegistryPolicy'
    )


class XAmzTarget23(Enum):
    AmazonEC2ContainerRegistry_V20150921_GetRegistryScanningConfiguration = (
        'AmazonEC2ContainerRegistry_V20150921.GetRegistryScanningConfiguration'
    )


class XAmzTarget24(Enum):
    AmazonEC2ContainerRegistry_V20150921_GetRepositoryPolicy = (
        'AmazonEC2ContainerRegistry_V20150921.GetRepositoryPolicy'
    )


class XAmzTarget25(Enum):
    AmazonEC2ContainerRegistry_V20150921_InitiateLayerUpload = (
        'AmazonEC2ContainerRegistry_V20150921.InitiateLayerUpload'
    )


class XAmzTarget26(Enum):
    AmazonEC2ContainerRegistry_V20150921_ListImages = (
        'AmazonEC2ContainerRegistry_V20150921.ListImages'
    )


class XAmzTarget27(Enum):
    AmazonEC2ContainerRegistry_V20150921_ListTagsForResource = (
        'AmazonEC2ContainerRegistry_V20150921.ListTagsForResource'
    )


class XAmzTarget28(Enum):
    AmazonEC2ContainerRegistry_V20150921_PutImage = (
        'AmazonEC2ContainerRegistry_V20150921.PutImage'
    )


class XAmzTarget29(Enum):
    AmazonEC2ContainerRegistry_V20150921_PutImageScanningConfiguration = (
        'AmazonEC2ContainerRegistry_V20150921.PutImageScanningConfiguration'
    )


class XAmzTarget30(Enum):
    AmazonEC2ContainerRegistry_V20150921_PutImageTagMutability = (
        'AmazonEC2ContainerRegistry_V20150921.PutImageTagMutability'
    )


class XAmzTarget31(Enum):
    AmazonEC2ContainerRegistry_V20150921_PutLifecyclePolicy = (
        'AmazonEC2ContainerRegistry_V20150921.PutLifecyclePolicy'
    )


class XAmzTarget32(Enum):
    AmazonEC2ContainerRegistry_V20150921_PutRegistryPolicy = (
        'AmazonEC2ContainerRegistry_V20150921.PutRegistryPolicy'
    )


class XAmzTarget33(Enum):
    AmazonEC2ContainerRegistry_V20150921_PutRegistryScanningConfiguration = (
        'AmazonEC2ContainerRegistry_V20150921.PutRegistryScanningConfiguration'
    )


class XAmzTarget34(Enum):
    AmazonEC2ContainerRegistry_V20150921_PutReplicationConfiguration = (
        'AmazonEC2ContainerRegistry_V20150921.PutReplicationConfiguration'
    )


class XAmzTarget35(Enum):
    AmazonEC2ContainerRegistry_V20150921_SetRepositoryPolicy = (
        'AmazonEC2ContainerRegistry_V20150921.SetRepositoryPolicy'
    )


class XAmzTarget36(Enum):
    AmazonEC2ContainerRegistry_V20150921_StartImageScan = (
        'AmazonEC2ContainerRegistry_V20150921.StartImageScan'
    )


class XAmzTarget37(Enum):
    AmazonEC2ContainerRegistry_V20150921_StartLifecyclePolicyPreview = (
        'AmazonEC2ContainerRegistry_V20150921.StartLifecyclePolicyPreview'
    )


class XAmzTarget38(Enum):
    AmazonEC2ContainerRegistry_V20150921_TagResource = (
        'AmazonEC2ContainerRegistry_V20150921.TagResource'
    )


class XAmzTarget39(Enum):
    AmazonEC2ContainerRegistry_V20150921_UntagResource = (
        'AmazonEC2ContainerRegistry_V20150921.UntagResource'
    )


class XAmzTarget40(Enum):
    AmazonEC2ContainerRegistry_V20150921_UploadLayerPart = (
        'AmazonEC2ContainerRegistry_V20150921.UploadLayerPart'
    )


class Attribute(BaseModel):
    key: AttributeKey
    value: Optional[AttributeValue] = None


class AttributeList(RootModel[List[Attribute]]):
    root: List[Attribute] = Field(..., max_length=50, min_length=0)


class AuthorizationData(BaseModel):
    authorizationToken: Optional[Base64] = None
    expiresAt: Optional[ExpirationTimestamp] = None
    proxyEndpoint: Optional[ProxyEndpoint] = None


class AuthorizationDataList(RootModel[List[AuthorizationData]]):
    root: List[AuthorizationData]


class AwsEcrContainerImageDetails(BaseModel):
    architecture: Optional[Arch] = None
    author: Optional[Author] = None
    imageHash: Optional[ImageDigest] = None
    imageTags: Optional[ImageTagsList] = None
    platform: Optional[Platform] = None
    pushedAt: Optional[Date] = None
    registry: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None


class BatchCheckLayerAvailabilityRequest(BaseModel):
    layerDigests: BatchedOperationLayerDigestList
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class BatchGetRepositoryScanningConfigurationRequest(BaseModel):
    repositoryNames: ScanningConfigurationRepositoryNameList


class CompleteLayerUploadRequest(BaseModel):
    layerDigests: LayerDigestList
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName
    uploadId: UploadId


class CompleteLayerUploadResponse(BaseModel):
    layerDigest: Optional[LayerDigest] = None
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None
    uploadId: Optional[UploadId] = None


class CreatePullThroughCacheRuleRequest(BaseModel):
    ecrRepositoryPrefix: PullThroughCacheRuleRepositoryPrefix
    registryId: Optional[RegistryId] = None
    upstreamRegistryUrl: Url


class CreatePullThroughCacheRuleResponse(BaseModel):
    createdAt: Optional[CreationTimestamp] = None
    ecrRepositoryPrefix: Optional[PullThroughCacheRuleRepositoryPrefix] = None
    registryId: Optional[RegistryId] = None
    upstreamRegistryUrl: Optional[Url] = None


class CvssScore(BaseModel):
    baseScore: Optional[BaseScore] = None
    scoringVector: Optional[ScoringVector] = None
    source: Optional[Source] = None
    version: Optional[Version] = None


class CvssScoreAdjustment(BaseModel):
    metric: Optional[Metric] = None
    reason: Optional[Reason] = None


class CvssScoreAdjustmentList(RootModel[List[CvssScoreAdjustment]]):
    root: List[CvssScoreAdjustment]


class CvssScoreDetails(BaseModel):
    adjustments: Optional[CvssScoreAdjustmentList] = None
    score: Optional[Score] = None
    scoreSource: Optional[Source] = None
    scoringVector: Optional[ScoringVector] = None
    version: Optional[Version] = None


class CvssScoreList(RootModel[List[CvssScore]]):
    root: List[CvssScore]


class DeleteLifecyclePolicyRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class DeleteLifecyclePolicyResponse(BaseModel):
    lastEvaluatedAt: Optional[EvaluationTimestamp] = None
    lifecyclePolicyText: Optional[LifecyclePolicyText] = None
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None


class DeletePullThroughCacheRuleRequest(BaseModel):
    ecrRepositoryPrefix: PullThroughCacheRuleRepositoryPrefix
    registryId: Optional[RegistryId] = None


class DeletePullThroughCacheRuleResponse(BaseModel):
    createdAt: Optional[CreationTimestamp] = None
    ecrRepositoryPrefix: Optional[PullThroughCacheRuleRepositoryPrefix] = None
    registryId: Optional[RegistryId] = None
    upstreamRegistryUrl: Optional[Url] = None


class DeleteRegistryPolicyResponse(BaseModel):
    policyText: Optional[RegistryPolicyText] = None
    registryId: Optional[RegistryId] = None


class DeleteRepositoryPolicyRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class DeleteRepositoryPolicyResponse(BaseModel):
    policyText: Optional[RepositoryPolicyText] = None
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None


class DeleteRepositoryRequest(BaseModel):
    force: Optional[ForceFlag] = None
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class DescribeImagesFilter(BaseModel):
    tagStatus: Optional[TagStatus] = None


class DescribePullThroughCacheRulesRequest(BaseModel):
    ecrRepositoryPrefixes: Optional[PullThroughCacheRuleRepositoryPrefixList] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
    registryId: Optional[RegistryId] = None


class DescribeRepositoriesRequest(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
    registryId: Optional[RegistryId] = None
    repositoryNames: Optional[RepositoryNameList] = None


class EncryptionConfiguration(BaseModel):
    encryptionType: EncryptionType
    kmsKey: Optional[KmsKey] = None


class FindingSeverityCounts(RootModel[Optional[Dict[str, SeverityCount]]]):
    root: Optional[Dict[str, SeverityCount]] = None


class GetAuthorizationTokenRegistryIdList(RootModel[List[RegistryId]]):
    root: List[RegistryId] = Field(..., max_length=10, min_length=1)


class GetAuthorizationTokenRequest(BaseModel):
    registryIds: Optional[GetAuthorizationTokenRegistryIdList] = None


class GetAuthorizationTokenResponse(BaseModel):
    authorizationData: Optional[AuthorizationDataList] = None


class GetDownloadUrlForLayerRequest(BaseModel):
    layerDigest: LayerDigest
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class GetDownloadUrlForLayerResponse(BaseModel):
    downloadUrl: Optional[Url] = None
    layerDigest: Optional[LayerDigest] = None


class GetLifecyclePolicyRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class GetLifecyclePolicyResponse(BaseModel):
    lastEvaluatedAt: Optional[EvaluationTimestamp] = None
    lifecyclePolicyText: Optional[LifecyclePolicyText] = None
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None


class GetRegistryPolicyResponse(BaseModel):
    policyText: Optional[RegistryPolicyText] = None
    registryId: Optional[RegistryId] = None


class GetRepositoryPolicyRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class GetRepositoryPolicyResponse(BaseModel):
    policyText: Optional[RepositoryPolicyText] = None
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None


class ImageIdentifier(BaseModel):
    imageDigest: Optional[ImageDigest] = None
    imageTag: Optional[ImageTag] = None


class ImageIdentifierList(RootModel[List[ImageIdentifier]]):
    root: List[ImageIdentifier] = Field(..., max_length=100, min_length=1)


class ImageReplicationStatus(BaseModel):
    failureCode: Optional[ReplicationError] = None
    region: Optional[Region] = None
    registryId: Optional[RegistryId] = None
    status: Optional[ReplicationStatus] = None


class ImageReplicationStatusList(RootModel[List[ImageReplicationStatus]]):
    root: List[ImageReplicationStatus]


class ImageScanFinding(BaseModel):
    attributes: Optional[AttributeList] = None
    description: Optional[FindingDescription] = None
    name: Optional[FindingName] = None
    severity: Optional[FindingSeverity] = None
    uri: Optional[Url] = None


class ImageScanFindingList(RootModel[List[ImageScanFinding]]):
    root: List[ImageScanFinding]


class ImageScanFindingsSummary(BaseModel):
    findingSeverityCounts: Optional[FindingSeverityCounts] = None
    imageScanCompletedAt: Optional[ScanTimestamp] = None
    vulnerabilitySourceUpdatedAt: Optional[VulnerabilitySourceUpdateTimestamp] = None


class ImageScanStatus(BaseModel):
    description: Optional[ScanStatusDescription] = None
    status: Optional[ScanStatus] = None


class ImageScanningConfiguration(BaseModel):
    scanOnPush: Optional[ScanOnPushFlag] = None


class InitiateLayerUploadRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class InitiateLayerUploadResponse(BaseModel):
    partSize: Optional[PartSize] = None
    uploadId: Optional[UploadId] = None


class Layer(BaseModel):
    layerAvailability: Optional[LayerAvailability] = None
    layerDigest: Optional[LayerDigest] = None
    layerSize: Optional[LayerSizeInBytes] = None
    mediaType: Optional[MediaType] = None


class LayerFailure(BaseModel):
    failureCode: Optional[LayerFailureCode] = None
    failureReason: Optional[LayerFailureReason] = None
    layerDigest: Optional[BatchedOperationLayerDigest] = None


class LayerFailureList(RootModel[List[LayerFailure]]):
    root: List[LayerFailure]


class LayerList(RootModel[List[Layer]]):
    root: List[Layer]


class LifecyclePolicyPreviewFilter(BaseModel):
    tagStatus: Optional[TagStatus] = None


class LifecyclePolicyPreviewResult(BaseModel):
    action: Optional[LifecyclePolicyRuleAction] = None
    appliedRulePriority: Optional[LifecyclePolicyRulePriority] = None
    imageDigest: Optional[ImageDigest] = None
    imagePushedAt: Optional[PushTimestamp] = None
    imageTags: Optional[ImageTagList] = None


class LifecyclePolicyPreviewResultList(RootModel[List[LifecyclePolicyPreviewResult]]):
    root: List[LifecyclePolicyPreviewResult]


class ListImagesFilter(BaseModel):
    tagStatus: Optional[TagStatus] = None


class ListImagesRequest(BaseModel):
    filter: Optional[ListImagesFilter] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class ListImagesResponse(BaseModel):
    imageIds: Optional[ImageIdentifierList] = None
    nextToken: Optional[NextToken] = None


class PullThroughCacheRule(BaseModel):
    createdAt: Optional[CreationTimestamp] = None
    ecrRepositoryPrefix: Optional[PullThroughCacheRuleRepositoryPrefix] = None
    registryId: Optional[RegistryId] = None
    upstreamRegistryUrl: Optional[Url] = None


class PullThroughCacheRuleList(RootModel[List[PullThroughCacheRule]]):
    root: List[PullThroughCacheRule]


class PutImageRequest(BaseModel):
    imageDigest: Optional[ImageDigest] = None
    imageManifest: ImageManifest
    imageManifestMediaType: Optional[MediaType] = None
    imageTag: Optional[ImageTag] = None
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class PutImageScanningConfigurationRequest(BaseModel):
    imageScanningConfiguration: ImageScanningConfiguration
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class PutImageScanningConfigurationResponse(BaseModel):
    imageScanningConfiguration: Optional[ImageScanningConfiguration] = None
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None


class PutImageTagMutabilityRequest(BaseModel):
    imageTagMutability: ImageTagMutability
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class PutImageTagMutabilityResponse(BaseModel):
    imageTagMutability: Optional[ImageTagMutability] = None
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None


class PutLifecyclePolicyRequest(BaseModel):
    lifecyclePolicyText: LifecyclePolicyText
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class PutLifecyclePolicyResponse(BaseModel):
    lifecyclePolicyText: Optional[LifecyclePolicyText] = None
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None


class PutRegistryPolicyRequest(BaseModel):
    policyText: RegistryPolicyText


class PutRegistryPolicyResponse(BaseModel):
    policyText: Optional[RegistryPolicyText] = None
    registryId: Optional[RegistryId] = None


class Recommendation(BaseModel):
    text: Optional[RecommendationText] = None
    url: Optional[Url] = None


class ReferenceUrlsList(RootModel[List[Url]]):
    root: List[Url]


class RelatedVulnerabilitiesList(RootModel[List[RelatedVulnerability]]):
    root: List[RelatedVulnerability]


class Remediation(BaseModel):
    recommendation: Optional[Recommendation] = None


class Repository(BaseModel):
    createdAt: Optional[CreationTimestamp] = None
    encryptionConfiguration: Optional[EncryptionConfiguration] = None
    imageScanningConfiguration: Optional[ImageScanningConfiguration] = None
    imageTagMutability: Optional[ImageTagMutability] = None
    registryId: Optional[RegistryId] = None
    repositoryArn: Optional[Arn] = None
    repositoryName: Optional[RepositoryName] = None
    repositoryUri: Optional[Url] = None


class RepositoryFilter(BaseModel):
    filter: RepositoryFilterValue
    filterType: RepositoryFilterType


class RepositoryFilterList(RootModel[List[RepositoryFilter]]):
    root: List[RepositoryFilter] = Field(..., max_length=100, min_length=1)


class RepositoryList(RootModel[List[Repository]]):
    root: List[Repository]


class RepositoryScanningConfigurationFailure(BaseModel):
    failureCode: Optional[ScanningConfigurationFailureCode] = None
    failureReason: Optional[ScanningConfigurationFailureReason] = None
    repositoryName: Optional[RepositoryName] = None


class RepositoryScanningConfigurationFailureList(
    RootModel[List[RepositoryScanningConfigurationFailure]]
):
    root: List[RepositoryScanningConfigurationFailure]


class ResourceDetails(BaseModel):
    awsEcrContainerImage: Optional[AwsEcrContainerImageDetails] = None


class ScanningRepositoryFilter(BaseModel):
    filter: ScanningRepositoryFilterValue
    filterType: ScanningRepositoryFilterType


class ScanningRepositoryFilterList(RootModel[List[ScanningRepositoryFilter]]):
    root: List[ScanningRepositoryFilter] = Field(..., max_length=100, min_length=0)


class ScoreDetails(BaseModel):
    cvss: Optional[CvssScoreDetails] = None


class StartImageScanRequest(BaseModel):
    imageId: ImageIdentifier
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class StartImageScanResponse(BaseModel):
    imageId: Optional[ImageIdentifier] = None
    imageScanStatus: Optional[ImageScanStatus] = None
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None


class Tag(BaseModel):
    Key: Optional[TagKey] = None
    Value: Optional[TagValue] = None


class TagList(RootModel[List[Tag]]):
    root: List[Tag]


class TagResourceRequest(BaseModel):
    resourceArn: Arn
    tags: TagList


class VulnerablePackage(BaseModel):
    arch: Optional[Arch] = None
    epoch: Optional[Epoch] = None
    filePath: Optional[FilePath] = None
    name: Optional[VulnerablePackageName] = None
    packageManager: Optional[PackageManager] = None
    release: Optional[Release] = None
    sourceLayerHash: Optional[SourceLayerHash] = None
    version: Optional[Version] = None


class VulnerablePackagesList(RootModel[List[VulnerablePackage]]):
    root: List[VulnerablePackage]


class BatchCheckLayerAvailabilityResponse(BaseModel):
    failures: Optional[LayerFailureList] = None
    layers: Optional[LayerList] = None


class BatchDeleteImageRequest(BaseModel):
    imageIds: ImageIdentifierList
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class BatchGetImageRequest(BaseModel):
    acceptedMediaTypes: Optional[MediaTypeList] = None
    imageIds: ImageIdentifierList
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class CreateRepositoryRequest(BaseModel):
    encryptionConfiguration: Optional[EncryptionConfiguration] = None
    imageScanningConfiguration: Optional[ImageScanningConfiguration] = None
    imageTagMutability: Optional[ImageTagMutability] = None
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName
    tags: Optional[TagList] = None


class CreateRepositoryResponse(BaseModel):
    repository: Optional[Repository] = None


class DeleteRepositoryResponse(BaseModel):
    repository: Optional[Repository] = None


class DescribeImageReplicationStatusRequest(BaseModel):
    imageId: ImageIdentifier
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class DescribeImageReplicationStatusResponse(BaseModel):
    imageId: Optional[ImageIdentifier] = None
    replicationStatuses: Optional[ImageReplicationStatusList] = None
    repositoryName: Optional[RepositoryName] = None


class DescribeImageScanFindingsRequest(BaseModel):
    imageId: ImageIdentifier
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class DescribeImagesRequest(BaseModel):
    filter: Optional[DescribeImagesFilter] = None
    imageIds: Optional[ImageIdentifierList] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class DescribePullThroughCacheRulesResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    pullThroughCacheRules: Optional[PullThroughCacheRuleList] = None


class DescribeRepositoriesResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    repositories: Optional[RepositoryList] = None


class GetLifecyclePolicyPreviewRequest(BaseModel):
    filter: Optional[LifecyclePolicyPreviewFilter] = None
    imageIds: Optional[ImageIdentifierList] = None
    maxResults: Optional[LifecyclePreviewMaxResults] = None
    nextToken: Optional[NextToken] = None
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class GetLifecyclePolicyPreviewResponse(BaseModel):
    lifecyclePolicyText: Optional[LifecyclePolicyText] = None
    nextToken: Optional[NextToken] = None
    previewResults: Optional[LifecyclePolicyPreviewResultList] = None
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None
    status: Optional[LifecyclePolicyPreviewStatus] = None
    summary: Optional[LifecyclePolicyPreviewSummary] = None


class Image(BaseModel):
    imageId: Optional[ImageIdentifier] = None
    imageManifest: Optional[ImageManifest] = None
    imageManifestMediaType: Optional[MediaType] = None
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None


class ImageDetail(BaseModel):
    artifactMediaType: Optional[MediaType] = None
    imageDigest: Optional[ImageDigest] = None
    imageManifestMediaType: Optional[MediaType] = None
    imagePushedAt: Optional[PushTimestamp] = None
    imageScanFindingsSummary: Optional[ImageScanFindingsSummary] = None
    imageScanStatus: Optional[ImageScanStatus] = None
    imageSizeInBytes: Optional[ImageSizeInBytes] = None
    imageTags: Optional[ImageTagList] = None
    lastRecordedPullTime: Optional[RecordedPullTimestamp] = None
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None


class ImageDetailList(RootModel[List[ImageDetail]]):
    root: List[ImageDetail]


class ImageFailure(BaseModel):
    failureCode: Optional[ImageFailureCode] = None
    failureReason: Optional[ImageFailureReason] = None
    imageId: Optional[ImageIdentifier] = None


class ImageFailureList(RootModel[List[ImageFailure]]):
    root: List[ImageFailure]


class ImageList(RootModel[List[Image]]):
    root: List[Image]


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[TagList] = None


class PackageVulnerabilityDetails(BaseModel):
    cvss: Optional[CvssScoreList] = None
    referenceUrls: Optional[ReferenceUrlsList] = None
    relatedVulnerabilities: Optional[RelatedVulnerabilitiesList] = None
    source: Optional[Source] = None
    sourceUrl: Optional[Url] = None
    vendorCreatedAt: Optional[Date] = None
    vendorSeverity: Optional[Severity] = None
    vendorUpdatedAt: Optional[Date] = None
    vulnerabilityId: Optional[VulnerabilityId] = None
    vulnerablePackages: Optional[VulnerablePackagesList] = None


class PutImageResponse(BaseModel):
    image: Optional[Image] = None


class RegistryScanningRule(BaseModel):
    repositoryFilters: ScanningRepositoryFilterList
    scanFrequency: ScanFrequency


class RegistryScanningRuleList(RootModel[List[RegistryScanningRule]]):
    root: List[RegistryScanningRule] = Field(..., max_length=2, min_length=0)


class ReplicationRule(BaseModel):
    destinations: ReplicationDestinationList
    repositoryFilters: Optional[RepositoryFilterList] = None


class ReplicationRuleList(RootModel[List[ReplicationRule]]):
    root: List[ReplicationRule] = Field(..., max_length=10, min_length=0)


class RepositoryScanningConfiguration(BaseModel):
    appliedScanFilters: Optional[ScanningRepositoryFilterList] = None
    repositoryArn: Optional[Arn] = None
    repositoryName: Optional[RepositoryName] = None
    scanFrequency: Optional[ScanFrequency] = None
    scanOnPush: Optional[ScanOnPushFlag] = None


class RepositoryScanningConfigurationList(
    RootModel[List[RepositoryScanningConfiguration]]
):
    root: List[RepositoryScanningConfiguration]


class Resource(BaseModel):
    details: Optional[ResourceDetails] = None
    id: Optional[ResourceId] = None
    tags: Optional[Tags] = None
    type: Optional[Type] = None


class ResourceList(RootModel[List[Resource]]):
    root: List[Resource]


class BatchDeleteImageResponse(BaseModel):
    failures: Optional[ImageFailureList] = None
    imageIds: Optional[ImageIdentifierList] = None


class BatchGetImageResponse(BaseModel):
    failures: Optional[ImageFailureList] = None
    images: Optional[ImageList] = None


class BatchGetRepositoryScanningConfigurationResponse(BaseModel):
    failures: Optional[RepositoryScanningConfigurationFailureList] = None
    scanningConfigurations: Optional[RepositoryScanningConfigurationList] = None


class DescribeImagesResponse(BaseModel):
    imageDetails: Optional[ImageDetailList] = None
    nextToken: Optional[NextToken] = None


class EnhancedImageScanFinding(BaseModel):
    awsAccountId: Optional[RegistryId] = None
    description: Optional[FindingDescription] = None
    findingArn: Optional[FindingArn] = None
    firstObservedAt: Optional[Date] = None
    lastObservedAt: Optional[Date] = None
    packageVulnerabilityDetails: Optional[PackageVulnerabilityDetails] = None
    remediation: Optional[Remediation] = None
    resources: Optional[ResourceList] = None
    score: Optional[Score] = None
    scoreDetails: Optional[ScoreDetails] = None
    severity: Optional[Severity] = None
    status: Optional[Status] = None
    title: Optional[Title] = None
    type: Optional[Type] = None
    updatedAt: Optional[Date] = None


class EnhancedImageScanFindingList(RootModel[List[EnhancedImageScanFinding]]):
    root: List[EnhancedImageScanFinding]


class ImageScanFindings(BaseModel):
    enhancedFindings: Optional[EnhancedImageScanFindingList] = None
    findingSeverityCounts: Optional[FindingSeverityCounts] = None
    findings: Optional[ImageScanFindingList] = None
    imageScanCompletedAt: Optional[ScanTimestamp] = None
    vulnerabilitySourceUpdatedAt: Optional[VulnerabilitySourceUpdateTimestamp] = None


class PutRegistryScanningConfigurationRequest(BaseModel):
    rules: Optional[RegistryScanningRuleList] = None
    scanType: Optional[ScanType] = None


class RegistryScanningConfiguration(BaseModel):
    rules: Optional[RegistryScanningRuleList] = None
    scanType: Optional[ScanType] = None


class ReplicationConfiguration(BaseModel):
    rules: ReplicationRuleList


class DescribeImageScanFindingsResponse(BaseModel):
    imageId: Optional[ImageIdentifier] = None
    imageScanFindings: Optional[ImageScanFindings] = None
    imageScanStatus: Optional[ImageScanStatus] = None
    nextToken: Optional[NextToken] = None
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None


class DescribeRegistryResponse(BaseModel):
    registryId: Optional[RegistryId] = None
    replicationConfiguration: Optional[ReplicationConfiguration] = None


class GetRegistryScanningConfigurationResponse(BaseModel):
    registryId: Optional[RegistryId] = None
    scanningConfiguration: Optional[RegistryScanningConfiguration] = None


class PutRegistryScanningConfigurationResponse(BaseModel):
    registryScanningConfiguration: Optional[RegistryScanningConfiguration] = None


class PutReplicationConfigurationRequest(BaseModel):
    replicationConfiguration: ReplicationConfiguration


class PutReplicationConfigurationResponse(BaseModel):
    replicationConfiguration: Optional[ReplicationConfiguration] = None
